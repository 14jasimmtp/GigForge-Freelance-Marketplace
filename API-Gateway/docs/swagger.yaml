basePath: /
definitions:
  Job.AcceptOfferRes:
    properties:
      Error:
        type: string
      Response:
        type: string
      status:
        type: integer
    type: object
  Job.AddCategoryRes:
    properties:
      Error:
        type: string
      Response:
        type: string
      status:
        type: integer
    type: object
  Job.CapturePaymentRes:
    properties:
      Error:
        type: string
      status:
        type: integer
      userName:
        type: string
    type: object
  Job.Category:
    properties:
      Category:
        type: string
      ID:
        type: integer
    type: object
  Job.Contracts:
    properties:
      AttachmentUrl:
        type: string
      Client_id:
        type: integer
      Freelancer_id:
        type: integer
      Job_description:
        type: string
      Job_title:
        type: string
      Start_date:
        type: string
      Total_amount:
        type: number
      contract_id:
        type: integer
      contract_status:
        type: string
      paid_amount:
        type: number
      payment_type:
        type: string
      pending_amount:
        type: number
    type: object
  Job.ExecutePaymentRes:
    properties:
      Error:
        type: string
      PaymentID:
        type: string
      merchantID:
        items:
          type: string
        type: array
      status:
        type: integer
    type: object
  Job.GJPRes:
    properties:
      Error:
        type: string
      Response:
        type: string
      Status:
        type: integer
      prop:
        items:
          $ref: '#/definitions/Job.Proposals'
        type: array
    type: object
  Job.GetAllContractsForClientRes:
    properties:
      Error:
        type: string
      contracts:
        items:
          $ref: '#/definitions/Job.Contracts'
        type: array
      status:
        type: integer
    type: object
  Job.GetCategoryRes:
    properties:
      Categories:
        items:
          $ref: '#/definitions/Job.Category'
        type: array
      Error:
        type: string
      status:
        type: integer
    type: object
  Job.GetInvoiceContractRes:
    properties:
      Error:
        type: string
      Status:
        type: integer
      invoices:
        items:
          $ref: '#/definitions/Job.Invoices'
        type: array
    type: object
  Job.GetJobOfferForFreelancerRes:
    properties:
      Error:
        type: string
      Offers:
        items:
          $ref: '#/definitions/Job.Offer'
        type: array
      status:
        type: integer
    type: object
  Job.GetJobRes:
    properties:
      Job:
        $ref: '#/definitions/Job.Job'
      Status:
        type: integer
      error:
        type: string
      response:
        type: string
    type: object
  Job.GetJobsRes:
    properties:
      Job:
        items:
          $ref: '#/definitions/Job.Job'
        type: array
      Status:
        type: integer
      error:
        type: string
      response:
        type: string
    type: object
  Job.GetMyJobsRes:
    properties:
      Error:
        type: string
      Jobs:
        items:
          $ref: '#/definitions/Job.Job'
        type: array
      response:
        type: string
      status:
        type: integer
    type: object
  Job.GetOneContractForClientRes:
    properties:
      Error:
        type: string
      contract:
        $ref: '#/definitions/Job.Contracts'
      status:
        type: integer
    type: object
  Job.InvoiceRes:
    properties:
      Error:
        type: string
      Response:
        type: string
      status:
        type: integer
    type: object
  Job.Invoices:
    properties:
      EndDate:
        type: string
      FreelancerFee:
        type: number
      InvoiceID:
        type: integer
      MarketPlaceFee:
        type: number
      PaymentStatus:
        type: string
      StartDate:
        type: string
      TotalAmount:
        type: number
      contractID:
        type: integer
    type: object
  Job.Job:
    properties:
      Budget:
        type: number
      Category:
        type: string
      Description:
        type: string
      ID:
        type: integer
      TimePeriod:
        type: string
      Title:
        type: string
      Type:
        type: string
      skills:
        items:
          type: string
        type: array
    type: object
  Job.Offer:
    properties:
      Starting_time:
        type: string
      budget:
        type: number
      client_id:
        type: string
      job_id:
        type: string
      offer_id:
        type: number
      offer_letter:
        type: string
      status:
        type: string
    type: object
  Job.PostjobRes:
    properties:
      Error:
        type: string
      Response:
        type: string
      status:
        type: integer
    type: object
  Job.ProposalRes:
    properties:
      Error:
        type: string
      Response:
        type: string
      status:
        type: integer
    type: object
  Job.Proposals:
    properties:
      budget:
        type: number
      coverletter:
        type: string
      user_id:
        type: integer
    type: object
  Job.SearchJobsRes:
    properties:
      Error:
        type: string
      Response:
        type: string
      jobs:
        items:
          $ref: '#/definitions/Job.Job'
        type: array
      status:
        type: integer
    type: object
  Job.SendOfferRes:
    properties:
      Error:
        type: string
      Response:
        type: string
      status:
        type: integer
    type: object
  auth.AddSkillRes:
    properties:
      Error:
        type: string
      Response:
        type: string
      status:
        type: integer
    type: object
  auth.BlockRes:
    properties:
      Error:
        type: string
      Response:
        type: string
      status:
        type: integer
    type: object
  auth.FPres:
    properties:
      error:
        type: string
      response:
        type: string
      status:
        type: integer
    type: object
  auth.LoginRes:
    properties:
      Error:
        type: string
      Response:
        type: string
      Token:
        type: string
      status:
        type: integer
    type: object
  auth.RPres:
    properties:
      error:
        type: string
      response:
        type: string
      status:
        type: integer
    type: object
  auth.UserLoginRes:
    properties:
      error:
        type: string
      message:
        type: string
      status:
        type: integer
      token:
        type: string
    type: object
  auth.UserSignupRes:
    properties:
      error:
        type: string
      message:
        type: string
      status:
        type: integer
      token:
        type: string
    type: object
  auth.VerifyRes:
    properties:
      error:
        type: string
      message:
        type: string
      status:
        type: integer
    type: object
  project.AddSingleProjectRes:
    properties:
      Error:
        type: string
      Response:
        type: string
      status:
        type: integer
    type: object
  project.BuyProjectRes:
    properties:
      Error:
        type: string
      Response:
        type: string
      status:
        type: integer
    type: object
  project.CapturePaymentRes:
    properties:
      Error:
        type: string
      status:
        type: integer
      userName:
        type: string
    type: object
  project.EditSingleProjectRes:
    properties:
      Error:
        type: string
      Response:
        type: string
      status:
        type: integer
    type: object
  project.ExecutePaymentRes:
    properties:
      Error:
        type: string
      PaymentID:
        type: string
      merchantID:
        items:
          type: string
        type: array
      status:
        type: integer
    type: object
  project.ListMyProjectRes:
    properties:
      Error:
        type: string
      Project:
        items:
          $ref: '#/definitions/project.Project'
        type: array
      Response:
        type: string
      status:
        type: integer
    type: object
  project.ListOneProjectRes:
    properties:
      Error:
        type: string
      Response:
        type: string
      project:
        $ref: '#/definitions/project.Project'
      status:
        type: integer
    type: object
  project.ListProjectsRes:
    properties:
      Error:
        type: string
      Response:
        type: string
      project:
        items:
          $ref: '#/definitions/project.Project'
        type: array
      status:
        type: integer
    type: object
  project.Project:
    properties:
      Category:
        type: string
      Description:
        type: string
      ID:
        type: integer
      Price:
        type: number
      Title:
        type: string
      delivery_days:
        type: integer
      number_of_revisions:
        type: integer
    type: object
  project.RemProjectRes:
    properties:
      Error:
        type: string
      Response:
        type: string
      status:
        type: integer
    type: object
  req.AddCategory:
    properties:
      category:
        type: string
    required:
    - category
    type: object
  req.AddPayment:
    properties:
      email:
        type: string
    required:
    - email
    type: object
  req.AddReview:
    properties:
      freelancer_id:
        type: integer
      rating:
        maximum: 5
        minimum: 1
        type: integer
      review:
        type: string
    required:
    - freelancer_id
    - rating
    - review
    type: object
  req.AddSingleProject:
    properties:
      Delivery days:
        type: integer
      Description:
        type: string
      Number_of_revisions:
        type: integer
      category:
        type: integer
      price:
        type: number
      title:
        type: string
    required:
    - Description
    - category
    - title
    type: object
  req.AddSkills:
    properties:
      description:
        type: string
      skill:
        type: string
    required:
    - description
    - skill
    type: object
  req.Address:
    properties:
      city:
        type: string
      country:
        type: string
      district:
        type: string
      pinCode:
        type: string
      state:
        type: string
    type: object
  req.Education:
    properties:
      Course:
        type: string
      area_of_study:
        type: string
      date_ended:
        type: string
      date_started:
        type: string
      description:
        type: string
      school:
        type: string
    required:
    - Course
    - area_of_study
    - date_ended
    - date_started
    - description
    - school
    type: object
  req.Experience:
    properties:
      city:
        type: string
      company:
        type: string
      country:
        type: string
      description:
        type: string
      from-date:
        type: string
      title:
        type: string
      to-date:
        type: string
    required:
    - city
    - company
    - country
    - description
    - from-date
    - title
    - to-date
    type: object
  req.ForgotPassword:
    properties:
      email:
        type: string
    required:
    - email
    type: object
  req.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  req.PostJob:
    properties:
      Description:
        type: string
      budget:
        type: number
      category:
        type: integer
      skills:
        items:
          type: integer
        type: array
      time-period:
        type: string
      title:
        type: string
      type:
        type: string
    required:
    - Description
    - budget
    - category
    - skills
    - time-period
    - title
    - type
    type: object
  req.Profile:
    properties:
      Title:
        type: string
      description:
        type: string
      hourly_rate:
        type: integer
    required:
    - Title
    - description
    - hourly_rate
    type: object
  req.Proposal:
    type: object
  req.ResetPassword:
    properties:
      otp:
        type: integer
      password:
        type: string
    type: object
  req.SendInvoice:
    properties:
      Hours_worked:
        type: integer
      contractID:
        type: integer
      description:
        type: string
      week_ending_date:
        type: string
      week_starting_date:
        type: string
    type: object
  req.SendOffer:
    properties:
      budget:
        type: number
      freelancer_id:
        type: integer
      job_id:
        type: integer
      offer_letter:
        type: string
      starting_time:
        type: string
    type: object
  req.SignupRequest:
    properties:
      country:
        type: string
      email:
        type: string
      firstname:
        type: string
      lastname:
        type: string
      password:
        type: string
      phone:
        type: string
    required:
    - country
    - email
    - firstname
    - lastname
    - password
    - phone
    type: object
  req.Skills:
    properties:
      skills:
        items:
          type: integer
        type: array
    required:
    - skills
    type: object
  req.UpdateCompanyContact:
    properties:
      OwnerName:
        type: string
      address:
        $ref: '#/definitions/req.Address'
      phone:
        type: string
    type: object
  req.UpdateCompanyDetails:
    properties:
      NumberOfEmployees:
        type: integer
      company:
        type: string
      industry:
        type: string
      tagline:
        type: string
      website:
        type: string
    type: object
  req.Verify:
    properties:
      otp:
        type: integer
    required:
    - otp
    type: object
  res.CommonRes:
    properties:
      body: {}
      error:
        type: string
      message:
        type: string
      status:
        type: string
    type: object
host: gigforge.jasim.online
info:
  contact: {}
  description: Freelance Marketplace.
  termsOfService: http://swagger.io/terms/
  title: GigForge
  version: "1.0"
paths:
  /admin/category:
    post:
      consumes:
      - application/json
      description: Add a new category with the provided details
      parameters:
      - description: Category details
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/req.AddCategory'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully added category
          schema:
            $ref: '#/definitions/Job.AddCategoryRes'
        "400":
          description: Bad request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - AdminAccessToken: []
      summary: Add a new category
      tags:
      - admin
  /admin/login:
    post:
      consumes:
      - application/json
      description: Authenticate an admin user with email and password
      parameters:
      - description: Login credentials
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/req.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully authenticated
          schema:
            $ref: '#/definitions/auth.LoginRes'
        "400":
          description: Bad request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Admin login
      tags:
      - admin
  /admin/skills:
    post:
      consumes:
      - application/json
      description: Add a new skill with the provided details
      parameters:
      - description: Skill details
        in: body
        name: skill
        required: true
        schema:
          $ref: '#/definitions/req.AddSkills'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully added skill
          schema:
            $ref: '#/definitions/auth.AddSkillRes'
        "400":
          description: Bad request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - AdminAccessToken: []
      summary: Add a new skill
      tags:
      - admin
  /admin/user/block:
    put:
      consumes:
      - application/json
      description: Block a user by their ID
      parameters:
      - description: User ID
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User blocked successfully
          schema:
            $ref: '#/definitions/auth.BlockRes'
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - AdminAccessToken: []
      summary: Block a user
      tags:
      - admin
  /admin/user/unblock:
    put:
      consumes:
      - application/json
      description: Unblock a user by their ID
      parameters:
      - description: User ID
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User unblocked successfully
          schema:
            $ref: '#/definitions/auth.BlockRes'
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - AdminAccessToken: []
      summary: Unblock a user
      tags:
      - admin
  /auth/forgot-password:
    post:
      consumes:
      - application/json
      description: Request to reset user password
      parameters:
      - description: Request details
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/req.ForgotPassword'
      produces:
      - application/json
      responses:
        "200":
          description: Password reset request successful
          schema:
            $ref: '#/definitions/auth.FPres'
        "400":
          description: Bad request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Forgot password
      tags:
      - auth
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate a user with email and password
      parameters:
      - description: Login credentials
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/req.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully authenticated
          schema:
            $ref: '#/definitions/auth.UserLoginRes'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/res.CommonRes'
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: User login
      tags:
      - auth
  /auth/reset-password:
    post:
      consumes:
      - application/json
      description: Reset user password using OTP and token
      parameters:
      - description: Request details
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/req.ResetPassword'
      - description: Authentication token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Password reset successful
          schema:
            $ref: '#/definitions/auth.RPres'
        "400":
          description: Bad request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Reset password
      tags:
      - auth
  /auth/signup:
    post:
      consumes:
      - application/json
      description: Register a new user
      parameters:
      - description: User role
        in: query
        name: role
        required: true
        type: string
      - description: User details
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/req.SignupRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully signed up
          schema:
            $ref: '#/definitions/auth.UserSignupRes'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/res.CommonRes'
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: User signup
      tags:
      - auth
  /auth/verify:
    post:
      consumes:
      - application/json
      description: Verify OTP for user authentication
      parameters:
      - description: Verification details
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/req.Verify'
      - description: Authentication token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OTP verification successful
          schema:
            $ref: '#/definitions/auth.VerifyRes'
        "400":
          description: Bad request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Verify OTP
      tags:
      - auth
  /chat:
    get:
      description: Establish a WebSocket connection for real-time chat messaging.
        This endpoint allows users to send and receive messages in real time.
      produces:
      - application/json
      responses: {}
      security:
      - Authorization: []
      summary: WebSocket Chat
      tags:
      - Chat
  /chat/messages/{receiver_id}:
    get:
      description: Retrieve chat messages between the logged-in user and the specified
        receiver.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/res.CommonRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/res.CommonRes'
      security:
      - Authorization: []
      summary: Get Chat Messages
      tags:
      - Chat
  /client/contracts:
    get:
      description: Get all contracts for a specific client
      parameters:
      - description: Contract status
        in: query
        name: status
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved contracts
          schema:
            $ref: '#/definitions/Job.GetAllContractsForClientRes'
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - ClientAccessToken: []
      summary: Get all contracts for a client
      tags:
      - contracts
  /client/contracts/{id}:
    get:
      description: Get details of a specific contract
      parameters:
      - description: Contract ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved contract
          schema:
            $ref: '#/definitions/Job.GetOneContractForClientRes'
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - ClientAccessToken: []
      summary: Get a contract
      tags:
      - contracts
  /client/contracts/attachment:
    post:
      consumes:
      - multipart/form-data
      description: Add an attachment to a contract
      parameters:
      - description: Authorization
        in: header
        name: Authorization
        required: true
        type: string
      - description: Contract Attachment
        in: formData
        name: attachment
        required: true
        type: file
      - description: Contract ID
        in: formData
        name: ContractID
        required: true
        type: integer
      - description: Attachment Description
        in: formData
        name: Description
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/res.CommonRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/res.CommonRes'
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Add Contract Attachment
      tags:
      - Jobs
  /client/contracts/attachment/{contractID}:
    get:
      consumes:
      - application/json
      description: Get all attachments for a contract
      parameters:
      - description: Authorization
        in: header
        name: Authorization
        required: true
        type: string
      - description: Contract ID
        in: path
        name: contractID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/res.CommonRes'
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get Attachments
      tags:
      - Jobs
  /client/contracts/invoices/{contractID}:
    get:
      description: Get all invoices for a specific contract
      parameters:
      - description: Contract ID
        in: path
        name: contractID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved invoices
          schema:
            $ref: '#/definitions/Job.GetInvoiceContractRes'
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - ClientAccessToken: []
      summary: Get all invoices of a contract
      tags:
      - contracts
  /client/job:
    get:
      description: Get jobs posted by the authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved jobs
          schema:
            $ref: '#/definitions/Job.GetMyJobsRes'
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - ClientAccessToken: []
      summary: Get my jobs
      tags:
      - jobs
    post:
      consumes:
      - application/json
      description: Create a new job listing
      parameters:
      - description: Job details
        in: body
        name: job
        required: true
        schema:
          $ref: '#/definitions/req.PostJob'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully posted job
          schema:
            $ref: '#/definitions/Job.PostjobRes'
        "400":
          description: Error validating request body
          schema:
            $ref: '#/definitions/res.CommonRes'
        "403":
          description: Forbidden
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - ClientAccessToken: []
      summary: Post a job
      tags:
      - jobs
  /client/job/{jobID}:
    put:
      consumes:
      - application/json
      description: Edit an existing job listing
      parameters:
      - description: Job details
        in: body
        name: job
        required: true
        schema:
          $ref: '#/definitions/req.PostJob'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully edited job
          schema:
            $ref: '#/definitions/Job.PostjobRes'
        "400":
          description: Error validating request body
          schema:
            $ref: '#/definitions/res.CommonRes'
        "403":
          description: Forbidden
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - ClientAccessToken: []
      summary: Edit a job
      tags:
      - jobs
  /client/job/proposals/{id}:
    get:
      description: Get all proposals for a specific job
      parameters:
      - description: Job ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved proposals
          schema:
            $ref: '#/definitions/Job.GJPRes'
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - ClientAccessToken: []
      summary: Get proposals of a job
      tags:
      - jobs
  /client/job/send-offer:
    post:
      consumes:
      - application/json
      description: Send a job offer to a freelancer
      parameters:
      - description: Offer details
        in: body
        name: offer
        required: true
        schema:
          $ref: '#/definitions/req.SendOffer'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully sent offer
          schema:
            $ref: '#/definitions/Job.SendOfferRes'
        "400":
          description: Error validating request body
          schema:
            $ref: '#/definitions/res.CommonRes'
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - ClientAccessToken: []
      summary: Send a job offer
      tags:
      - jobs
  /client/profile:
    get:
      description: Get the profile of a client
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/res.CommonRes'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/res.CommonRes'
      security:
      - ClientAccessToken: []
      summary: Get client profile
      tags:
      - Profile
  /client/profile/company-contacts:
    put:
      consumes:
      - application/json
      description: Update the company contact details for the user
      parameters:
      - description: Company Contact Details
        in: body
        name: CompanyContact
        required: true
        schema:
          $ref: '#/definitions/req.UpdateCompanyContact'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/res.CommonRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/res.CommonRes'
      security:
      - ClientAccessToken: []
      summary: Update company contact details
      tags:
      - Profile
  /client/profile/company-details:
    put:
      consumes:
      - application/json
      description: Update the company details for the user
      parameters:
      - description: Company Details
        in: body
        name: CompanyDetails
        required: true
        schema:
          $ref: '#/definitions/req.UpdateCompanyDetails'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/res.CommonRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/res.CommonRes'
      security:
      - ClientAccessToken: []
      summary: Update company details
      tags:
      - Profile
  /client/projects/order/{id}:
    post:
      description: Buy a specific project
      parameters:
      - description: Project ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully bought project
          schema:
            $ref: '#/definitions/project.BuyProjectRes'
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - ClientAccessToken: []
      summary: Buy a project
      tags:
      - projects
  /client/review-freelancer:
    post:
      consumes:
      - application/json
      description: Add a review for a freelancer
      parameters:
      - description: Review Details
        in: body
        name: Review
        required: true
        schema:
          $ref: '#/definitions/req.AddReview'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/res.CommonRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/res.CommonRes'
      security:
      - ClientAccessToken: []
      summary: Add review for freelancer
      tags:
      - Profile
  /freelancer/job/accept-offer/{offer_id}:
    post:
      description: Accept a job offer from a client
      parameters:
      - description: Offer ID
        in: path
        name: offer_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully accepted offer
          schema:
            $ref: '#/definitions/Job.AcceptOfferRes'
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - FreelancerAccessToken: []
      summary: Accept a job offer
      tags:
      - jobs
  /freelancer/job/invoice:
    post:
      consumes:
      - application/json
      description: Send a weekly invoice for a contract
      parameters:
      - description: Invoice details
        in: body
        name: invoice
        required: true
        schema:
          $ref: '#/definitions/req.SendInvoice'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully sent invoice
          schema:
            $ref: '#/definitions/Job.InvoiceRes'
        "400":
          description: Error validating request body
          schema:
            $ref: '#/definitions/res.CommonRes'
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - FreelancerAccessToken: []
      summary: Send an invoice
      tags:
      - jobs
  /freelancer/job/offers:
    get:
      description: Get all job offers for a specific freelancer
      parameters:
      - description: Offer status
        in: query
        name: status
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved job offers
          schema:
            $ref: '#/definitions/Job.GetJobOfferForFreelancerRes'
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - FreelancerAccessToken: []
      summary: Get job offers for a freelancer
      tags:
      - jobs
  /freelancer/job/send-proposal:
    post:
      consumes:
      - application/json
      description: Send a proposal for a job
      parameters:
      - description: Job ID
        in: query
        name: jobID
        required: true
        type: string
      - description: Proposal details
        in: body
        name: proposal
        required: true
        schema:
          $ref: '#/definitions/req.Proposal'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully sent proposal
          schema:
            $ref: '#/definitions/Job.ProposalRes'
        "400":
          description: Error validating request body
          schema:
            $ref: '#/definitions/res.CommonRes'
        "403":
          description: Forbidden
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - FreelancerAccessToken: []
      summary: Send a proposal
      tags:
      - jobs
  /freelancer/profile:
    get:
      description: Get the profile of a freelancer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/res.CommonRes'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/res.CommonRes'
      security:
      - FreelancerAccessToken: []
      summary: Get freelancer profile
      tags:
      - Profile
  /freelancer/profile/description:
    patch:
      consumes:
      - application/json
      description: Update profile description for the user
      parameters:
      - description: Profile Details
        in: body
        name: Profile
        required: true
        schema:
          $ref: '#/definitions/req.Profile'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/res.CommonRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/res.CommonRes'
      security:
      - FreelancerAccessToken: []
      summary: Update profile description
      tags:
      - Profile
    post:
      consumes:
      - application/json
      description: Add profile description for the user
      parameters:
      - description: Profile Details
        in: body
        name: Profile
        required: true
        schema:
          $ref: '#/definitions/req.Profile'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/res.CommonRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/res.CommonRes'
      security:
      - FreelancerAccessToken: []
      summary: Add profile description
      tags:
      - Profile
  /freelancer/profile/education:
    post:
      consumes:
      - application/json
      description: Add education details for the user
      parameters:
      - description: Education Details
        in: body
        name: Education
        required: true
        schema:
          $ref: '#/definitions/req.Education'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/res.CommonRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/res.CommonRes'
      security:
      - FreelancerAccessToken: []
      summary: Add education details
      tags:
      - Profile
  /freelancer/profile/education/{id}:
    delete:
      description: Delete education details for the user
      parameters:
      - description: Education ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/res.CommonRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/res.CommonRes'
      security:
      - FreelancerAccessToken: []
      summary: Delete education details
      tags:
      - Profile
    patch:
      consumes:
      - application/json
      description: Update education details for the user
      parameters:
      - description: Education ID
        in: path
        name: id
        required: true
        type: string
      - description: Education Details
        in: body
        name: Education
        required: true
        schema:
          $ref: '#/definitions/req.Education'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/res.CommonRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/res.CommonRes'
      security:
      - FreelancerAccessToken: []
      summary: Update education details
      tags:
      - Profile
  /freelancer/profile/experience:
    post:
      consumes:
      - application/json
      description: Add experience for the user
      parameters:
      - description: Experience Details
        in: body
        name: Experience
        required: true
        schema:
          $ref: '#/definitions/req.Experience'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/res.CommonRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/res.CommonRes'
      security:
      - FreelancerAccessToken: []
      summary: Add experience
      tags:
      - Profile
  /freelancer/profile/experience/{id}:
    delete:
      description: Remove experience for the user
      parameters:
      - description: Experience ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/res.CommonRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/res.CommonRes'
      security:
      - FreelancerAccessToken: []
      summary: Remove experience
      tags:
      - Profile
    patch:
      consumes:
      - application/json
      description: Update experience for the user
      parameters:
      - description: Experience ID
        in: path
        name: id
        required: true
        type: string
      - description: Experience Details
        in: body
        name: Experience
        required: true
        schema:
          $ref: '#/definitions/req.Experience'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/res.CommonRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/res.CommonRes'
      security:
      - FreelancerAccessToken: []
      summary: Update experience
      tags:
      - Profile
  /freelancer/profile/photo:
    put:
      consumes:
      - multipart/form-data
      description: Update profile photo for the user
      parameters:
      - description: Profile Photo
        in: formData
        name: profile-photo
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/res.CommonRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/res.CommonRes'
      security:
      - FreelancerAccessToken: []
      summary: Update profile photo
      tags:
      - Profile
  /freelancer/profile/skill:
    post:
      consumes:
      - application/json
      description: Update skills for the user profile
      parameters:
      - description: Skills Details
        in: body
        name: Skills
        required: true
        schema:
          $ref: '#/definitions/req.Skills'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/res.CommonRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/res.CommonRes'
      security:
      - FreelancerAccessToken: []
      summary: Update skills
      tags:
      - Profile
  /freelancer/projects:
    get:
      description: Get a list of projects posted by the authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved projects
          schema:
            $ref: '#/definitions/project.ListMyProjectRes'
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - FreelancerAccessToken: []
      summary: List my projects
      tags:
      - projects
    post:
      consumes:
      - application/json
      description: Create a new project listing
      parameters:
      - description: Project details
        in: body
        name: project
        required: true
        schema:
          $ref: '#/definitions/req.AddSingleProject'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully added project
          schema:
            $ref: '#/definitions/project.AddSingleProjectRes'
        "400":
          description: Error parsing request body
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Validation errors
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - FreelancerAccessToken: []
      summary: Add a single project
      tags:
      - projects
  /freelancer/projects/{id}:
    patch:
      consumes:
      - application/json
      description: Edit an existing project listing
      parameters:
      - description: Project ID
        in: path
        name: id
        required: true
        type: string
      - description: Project details
        in: body
        name: project
        required: true
        schema:
          $ref: '#/definitions/req.AddSingleProject'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully edited project
          schema:
            $ref: '#/definitions/project.EditSingleProjectRes'
        "400":
          description: Error parsing request body
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Validation errors
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - FreelancerAccessToken: []
      summary: Edit a project
      tags:
      - projects
  /freelancer/projects/{projectID}:
    delete:
      description: Remove an existing project listing
      parameters:
      - description: Project ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: Successfully removed project
          schema:
            $ref: '#/definitions/project.RemProjectRes'
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - FreelancerAccessToken: []
      summary: Remove a project
      tags:
      - projects
  /job/payment/execute:
    post:
      description: Execute payment for a contract invoice
      parameters:
      - description: Invoice ID
        in: query
        name: invoiceID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully executed payment
          schema:
            $ref: '#/definitions/Job.ExecutePaymentRes'
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Execute payment contract
      tags:
      - jobs
  /jobs:
    get:
      description: Get a list of all jobs
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved jobs
          schema:
            $ref: '#/definitions/Job.GetJobsRes'
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get all jobs
      tags:
      - jobs
  /jobs/{id}:
    get:
      description: Get details of a specific job
      parameters:
      - description: Job ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved job
          schema:
            $ref: '#/definitions/Job.GetJobRes'
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get a job
      tags:
      - jobs
  /jobs/categories:
    get:
      description: Get job categories based on a query
      parameters:
      - description: Query string
        in: query
        name: q
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved categories
          schema:
            $ref: '#/definitions/Job.GetCategoryRes'
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get categories
      tags:
      - jobs
  /jobs/payment:
    get:
      description: Get details of a payment contract
      parameters:
      - description: Invoice ID
        in: query
        name: invoiceID
        required: true
        type: string
      produces:
      - text/html
      responses:
        "200":
          description: Payment contract details
          schema:
            type: string
      summary: Get payment contract
      tags:
      - jobs
  /jobs/payment/capture:
    post:
      description: Capture payment for a contract
      parameters:
      - description: Payment ID
        in: query
        name: paymentID
        required: true
        type: string
      - description: Invoice ID
        in: query
        name: invoiceID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully captured payment
          schema:
            $ref: '#/definitions/Job.CapturePaymentRes'
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Capture payment contract
      tags:
      - jobs
  /jobs/search:
    get:
      description: Search for jobs based on various criteria
      parameters:
      - description: Query string
        in: query
        name: q
        required: true
        type: string
      - description: Pay type
        in: query
        name: t
        type: string
      - description: Hourly rate
        in: query
        name: hourly_rate
        type: string
      - description: Fixed rate
        in: query
        name: fixed_rate
        type: string
      - description: Category
        in: query
        name: c
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved search results
          schema:
            $ref: '#/definitions/Job.SearchJobsRes'
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Search jobs
      tags:
      - jobs
  /notifications:
    get:
      description: Get notifications for the user
      parameters:
      - description: User ID
        in: path
        name: UserId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/res.CommonRes'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/res.CommonRes'
      security:
      - Authorization: []
      summary: Get user notifications
      tags:
      - Profile
  /payment/add:
    post:
      consumes:
      - application/json
      description: Add a PayPal payment email for the user
      parameters:
      - description: Authorization
        in: header
        name: Authorization
        required: true
        type: string
      - description: Payment Details
        in: body
        name: Payment
        required: true
        schema:
          $ref: '#/definitions/req.AddPayment'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/res.CommonRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/res.CommonRes'
      summary: Add PayPal payment email
      tags:
      - Profile
  /projects:
    get:
      description: Get a list of all projects
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved projects
          schema:
            $ref: '#/definitions/project.ListProjectsRes'
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: List all projects
      tags:
      - projects
  /projects/{id}:
    get:
      description: Get details of a specific project
      parameters:
      - description: Project ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved project
          schema:
            $ref: '#/definitions/project.ListOneProjectRes'
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get project by ID
      tags:
      - projects
  /projects/payment:
    get:
      description: Get details of a project payment
      parameters:
      - description: Order ID
        in: query
        name: orderID
        required: true
        type: string
      produces:
      - text/html
      responses:
        "200":
          description: Payment project details
          schema:
            type: string
      summary: Get project payment details
      tags:
      - projects
  /projects/payment/capture:
    post:
      description: Capture payment for a project order
      parameters:
      - description: Payment ID
        in: query
        name: paymentID
        required: true
        type: string
      - description: Order ID
        in: query
        name: orderID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully captured payment
          schema:
            $ref: '#/definitions/project.CapturePaymentRes'
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Capture project payment
      tags:
      - projects
  /projects/payment/execute:
    post:
      description: Execute payment for a project order
      parameters:
      - description: Order ID
        in: query
        name: orderID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully executed payment
          schema:
            $ref: '#/definitions/project.ExecutePaymentRes'
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Execute project payment
      tags:
      - projects
  /reviews/{freelancer_id}:
    get:
      description: Get reviews for a freelancer
      parameters:
      - description: Freelancer ID
        in: path
        name: freelancer_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/res.CommonRes'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/res.CommonRes'
      summary: Get freelancer reviews
      tags:
      - Profile
  /talents:
    get:
      description: Get a list of talents
      parameters:
      - description: Query
        in: query
        name: q
        type: string
      - description: Experience
        in: query
        name: exp
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/res.CommonRes'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/res.CommonRes'
      summary: Get talents
      tags:
      - Profile
securityDefinitions:
  AdminAccessToken:
    in: header
    name: Authorization
    type: apiKey
  Authorization:
    in: header
    name: Authorization
    type: apiKey
  ClientAccessToken:
    in: header
    name: Authorization
    type: apiKey
  FreelancerAccessToken:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
