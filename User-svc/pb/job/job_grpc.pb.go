// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.15.8
// source: pb/job/job.proto

package job

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// JobserviceClient is the client API for Jobservice service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JobserviceClient interface {
	GetJobsSkills(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Res, error)
	GetFreelancerPaypalEmail(ctx context.Context, in *Preq, opts ...grpc.CallOption) (*Pres, error)
	CheckPaypalEmailAdded(ctx context.Context, in *CReq, opts ...grpc.CallOption) (*CRes, error)
}

type jobserviceClient struct {
	cc grpc.ClientConnInterface
}

func NewJobserviceClient(cc grpc.ClientConnInterface) JobserviceClient {
	return &jobserviceClient{cc}
}

func (c *jobserviceClient) GetJobsSkills(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Res, error) {
	out := new(Res)
	err := c.cc.Invoke(ctx, "/job.Jobservice/GetJobsSkills", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobserviceClient) GetFreelancerPaypalEmail(ctx context.Context, in *Preq, opts ...grpc.CallOption) (*Pres, error) {
	out := new(Pres)
	err := c.cc.Invoke(ctx, "/job.Jobservice/GetFreelancerPaypalEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobserviceClient) CheckPaypalEmailAdded(ctx context.Context, in *CReq, opts ...grpc.CallOption) (*CRes, error) {
	out := new(CRes)
	err := c.cc.Invoke(ctx, "/job.Jobservice/CheckPaypalEmailAdded", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JobserviceServer is the server API for Jobservice service.
// All implementations must embed UnimplementedJobserviceServer
// for forward compatibility
type JobserviceServer interface {
	GetJobsSkills(context.Context, *Req) (*Res, error)
	GetFreelancerPaypalEmail(context.Context, *Preq) (*Pres, error)
	CheckPaypalEmailAdded(context.Context, *CReq) (*CRes, error)
	mustEmbedUnimplementedJobserviceServer()
}

// UnimplementedJobserviceServer must be embedded to have forward compatible implementations.
type UnimplementedJobserviceServer struct {
}

func (UnimplementedJobserviceServer) GetJobsSkills(context.Context, *Req) (*Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJobsSkills not implemented")
}
func (UnimplementedJobserviceServer) GetFreelancerPaypalEmail(context.Context, *Preq) (*Pres, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFreelancerPaypalEmail not implemented")
}
func (UnimplementedJobserviceServer) CheckPaypalEmailAdded(context.Context, *CReq) (*CRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckPaypalEmailAdded not implemented")
}
func (UnimplementedJobserviceServer) mustEmbedUnimplementedJobserviceServer() {}

// UnsafeJobserviceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JobserviceServer will
// result in compilation errors.
type UnsafeJobserviceServer interface {
	mustEmbedUnimplementedJobserviceServer()
}

func RegisterJobserviceServer(s grpc.ServiceRegistrar, srv JobserviceServer) {
	s.RegisterService(&Jobservice_ServiceDesc, srv)
}

func _Jobservice_GetJobsSkills_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobserviceServer).GetJobsSkills(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/job.Jobservice/GetJobsSkills",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobserviceServer).GetJobsSkills(ctx, req.(*Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _Jobservice_GetFreelancerPaypalEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Preq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobserviceServer).GetFreelancerPaypalEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/job.Jobservice/GetFreelancerPaypalEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobserviceServer).GetFreelancerPaypalEmail(ctx, req.(*Preq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Jobservice_CheckPaypalEmailAdded_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobserviceServer).CheckPaypalEmailAdded(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/job.Jobservice/CheckPaypalEmailAdded",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobserviceServer).CheckPaypalEmailAdded(ctx, req.(*CReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Jobservice_ServiceDesc is the grpc.ServiceDesc for Jobservice service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Jobservice_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "job.Jobservice",
	HandlerType: (*JobserviceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetJobsSkills",
			Handler:    _Jobservice_GetJobsSkills_Handler,
		},
		{
			MethodName: "GetFreelancerPaypalEmail",
			Handler:    _Jobservice_GetFreelancerPaypalEmail_Handler,
		},
		{
			MethodName: "CheckPaypalEmailAdded",
			Handler:    _Jobservice_CheckPaypalEmailAdded_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/job/job.proto",
}
